import{_ as s,c as t,o as i,af as a}from"./chunks/framework.BkXTFsxB.js";const u=JSON.parse('{"title":"Scripts Reference","description":"","frontmatter":{},"headers":[],"relativePath":"scripts-reference.md","filePath":"scripts-reference.md","lastUpdated":1762001301000}'),d={name:"scripts-reference.md"};function o(r,e,c,n,l,p){return i(),t("div",null,[...e[0]||(e[0]=[a(`<h1 id="scripts-reference" tabindex="-1">Scripts Reference <a class="header-anchor" href="#scripts-reference" aria-label="Permalink to &quot;Scripts Reference&quot;">​</a></h1><p>Single-page index for automation scripts.<br> Authoring guardrails live in <code>guides/guide-scripts.md</code>.<br> Template scaffolds: <code>/templates/script/</code>.</p><h2 id="runbook" tabindex="-1">Runbook <a class="header-anchor" href="#runbook" aria-label="Permalink to &quot;Runbook&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Guardrails bundle (build + lint + typecheck + test + guardrails)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> guardrails</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Individual checks</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts:lint</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # policy + headers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts:smoke</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # optional manual --help/--dry-run probe</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts:size</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # LOC budget</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts:test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # unit tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yaml:lint</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # validate YAML workflows/configs parse</span></span></code></pre></div><p><code>pnpm guardrails</code> now drives build, lint, typecheck, and test alongside the script/doc guardrails, fanning out up to three jobs at a time to stay inside the +90s budget. Watch the <code>[progress]</code> bar for dot updates, pass <code>--concurrency &lt;n&gt;</code> to tune throughput, or <code>--sequential</code> to match the legacy single-file order during incident response. Need an extra safety net? Run the manual smoke probe (<code>pnpm scripts:smoke</code>) whenever you want to double-check <code>--help</code>/<code>--dry-run</code> responses.</p><p>All scripts honour the shared CLI contract:</p><p><code>--dry-run</code> (default true for ops) · <code>--yes</code> to execute · <code>--output json|text</code> · <code>--log-level trace|debug|info|warn|error</code> · <code>--cwd &lt;path&gt;</code> · zero interactive prompts.</p><h2 id="script-catalog" tabindex="-1">Script Catalog <a class="header-anchor" href="#script-catalog" aria-label="Permalink to &quot;Script Catalog&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Path</th><th>Purpose</th><th>When to run</th></tr></thead><tbody><tr><td><code>scripts/ops/create-worktree-pr.mjs</code></td><td>Spin up worktree + PR from Issue, hydrate body from idea file</td><td>Kick off implementation after the idea passes validation</td></tr><tr><td><code>scripts/ops/archive-idea-for-issue.mjs</code></td><td>Move finished ideas to archive and close the feedback loop</td><td>After shipping the corresponding PR</td></tr><tr><td><code>scripts/ops/consolidate-changelog.mjs</code></td><td>Merge <code>_tmp</code> release notes into <code>CHANGELOG.md</code> with guardrails</td><td>Before publishing a new release</td></tr><tr><td><code>scripts/ops/create-issues-from-changelog.mjs</code></td><td>Raise follow-up issues for each changelog section</td><td>Immediately after changelog consolidation</td></tr><tr><td><code>scripts/ops/setup-project.mjs</code></td><td>Provision the roadmap GitHub Project + required fields</td><td>First-time project bootstrap or when cloning to another org</td></tr><tr><td><code>vitepress dev docs</code></td><td>Serve the GitHub Pages docs site locally</td><td>Preview sidebar/nav changes (<code>pnpm docs:dev</code>)</td></tr><tr><td><code>vitepress build docs</code></td><td>Build static docs output</td><td>Before publishing to GitHub Pages (<code>pnpm docs:build</code>)</td></tr><tr><td><code>scripts/checks/lint-guides.mjs</code></td><td>Legacy guide lint (archive only)</td><td>Rarely — when editing files under <code>guides/_archive/**</code></td></tr><tr><td><code>scripts/checks/dedupe-guides.mjs</code></td><td>Legacy guide similarity guard</td><td>Same as above (historical maintenance only)</td></tr><tr><td><code>scripts/checks/validate-ideas.mjs</code></td><td>Structural validation for idea files</td><td>Before calling <code>ideas-to-issues</code> or merging idea PRs</td></tr><tr><td><code>scripts/checks/pr-requirements.mjs</code></td><td>Ensures PR metadata + checklist compliance</td><td>Pre-merge or as part of <code>pnpm guardrails</code></td></tr><tr><td><code>scripts/checks/pr-template-lint.mjs</code></td><td>Confirms PR template placeholders match pipeline config</td><td>Whenever <code>.github/pull_request_template.md</code> changes</td></tr><tr><td><code>scripts/checks/template-coverage.mjs</code></td><td>Ensures templates ship README/USAGE/config</td><td>When adding or updating templates</td></tr><tr><td><code>scripts/checks/playbook-link-guard.mjs</code></td><td>Verifies Playbook pattern links point to canonical docs</td><td>Any change under <code>playbook/patterns/**</code></td></tr><tr><td><code>scripts/checks/guardrails.mjs</code></td><td>Runs the full guardrail suite with JSON/text summary output</td><td><code>pnpm guardrails</code> locally or in CI</td></tr></tbody></table><h2 id="idea-workflow-helpers" tabindex="-1">Idea Workflow Helpers <a class="header-anchor" href="#idea-workflow-helpers" aria-label="Permalink to &quot;Idea Workflow Helpers&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Command</th><th>Snapshot</th></tr></thead><tbody><tr><td><code>node scripts/ops/ideas-to-issues.mjs &lt;idea&gt;</code></td><td>Converts idea cards to GitHub Issues, replaces/maintains the Sub-Issues section</td></tr><tr><td><code>node scripts/ops/sync-ideas-checklists.mjs</code></td><td>Mirrors checklist state between idea files and live issues</td></tr><tr><td><code>node scripts/ops/merge-subissue-to-parent.mjs &lt;issue&gt;</code></td><td>Merges sub-issue branch, marks parent checklist, refreshes parent PR progress</td></tr><tr><td><code>node scripts/ops/sync-issue-to-card.mjs &lt;issue&gt;</code></td><td>Pulls updated Issue content back into the originating idea file</td></tr><tr><td><code>node scripts/ops/archive-closed-ideas.mjs</code></td><td>Batch-archives idea cards whose Issues are already closed</td></tr></tbody></table><p>Or use the pnpm shortcuts:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ideas:create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ideas-to-issues</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ideas:sync</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # sync-ideas-checklists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ideas:validate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # validate-ideas</span></span></code></pre></div><h3 id="create-worktree-pr-mjs-notes" tabindex="-1"><code>create-worktree-pr.mjs</code> notes <a class="header-anchor" href="#create-worktree-pr-mjs-notes" aria-label="Permalink to &quot;\`create-worktree-pr.mjs\` notes&quot;">​</a></h3><ul><li>Accepts <code>--base &lt;branch&gt;</code> to specify the base branch for worktree creation (defaults to <code>main</code>)</li><li>The script runs git commands from the repository root, eliminating <code>spawn git ENOENT</code> errors in sandboxed environments</li><li>Terminal output includes a confirmation log showing the resolved base branch for debugging</li></ul><h3 id="validate-ideas-mjs-quick-reference" tabindex="-1"><code>validate-ideas.mjs</code> quick reference <a class="header-anchor" href="#validate-ideas-mjs-quick-reference" aria-label="Permalink to &quot;\`validate-ideas.mjs\` quick reference&quot;">​</a></h3><ul><li>Supports Unit (<code>U-</code>), Composition (<code>C-</code>), Architecture (<code>ARCH-</code>), Playbook (<code>PB-</code>), Bug (<code>B-</code>), and brief (lowercase) idea cards.</li><li>Enforces section requirements per type (e.g., Purpose/Problem/Proposal/Acceptance Checklist for ARCH).</li><li>Warns on thin acceptance checklists and titles missing ticket prefixes to help guardrail compliance.</li><li>Run with <code>--filter &lt;prefix&gt;</code> for focused audits (e.g., <code>node scripts/checks/validate-ideas.mjs --filter ARCH-</code>).</li></ul><h3 id="sub-issue-pipeline-helpers" tabindex="-1">Sub-issue pipeline helpers <a class="header-anchor" href="#sub-issue-pipeline-helpers" aria-label="Permalink to &quot;Sub-issue pipeline helpers&quot;">​</a></h3><ul><li><code>ideas-to-issues.mjs</code> replaces (rather than appends) the <code>## Sub-Issues</code> section in parent Issues and preserves existing checkbox state when re-run.</li><li><code>create-worktree-pr.mjs</code> automatically adds <code>Part of #&lt;parent&gt;</code> context to child PRs when <code>Parent: #N</code> metadata exists on the idea card.</li><li><code>merge-subissue-to-parent.mjs</code> merges the branch, flips the matching parent Issue checklist item to <code>[x]</code>, and injects/updates a <code>## Sub-Issues Progress</code> section in the parent PR body.</li><li><code>archive-closed-ideas.mjs</code> performs one-off cleanups to move lingering idea cards for closed Issues into <code>/ideas/_archive/&lt;year&gt;/</code>.</li></ul><h2 id="supporting-libraries" tabindex="-1">Supporting Libraries <a class="header-anchor" href="#supporting-libraries" aria-label="Permalink to &quot;Supporting Libraries&quot;">​</a></h2><ul><li><code>_lib/core.mjs</code> — logging, CLI parsing, repo discovery, safe I/O.</li><li><code>_lib/git.mjs</code> — worktree + branch helpers.</li><li><code>_lib/validation.mjs</code> — shared schema checks.</li><li><code>_lib/allowlist.json</code> — network and file-system allowlist enforced by guardrails.</li></ul><p>Keep new automation inside these seams: pure helpers live in <code>_lib/</code>, orchestrators in <code>ops/</code>, validators in <code>checks/</code>, one-offs in <code>migration/</code>, and any expiring scripts in <code>DEPRECATED/</code> (90-day TTL).</p><h3 id="github-automation-preference" tabindex="-1">GitHub automation preference <a class="header-anchor" href="#github-automation-preference" aria-label="Permalink to &quot;GitHub automation preference&quot;">​</a></h3><ul><li>Prefer <code>gh</code> CLI commands for repository operations (<code>gh issue list</code>, <code>gh pr view</code>, <code>gh run view</code>) to leverage authentication and pagination.</li><li>Fall back to existing scripts in <code>/scripts/ops</code> or <code>/scripts/checks</code> when a higher-level workflow already exists.</li><li>Use raw <code>curl</code> only when GitHub CLI and local scripts do not expose the required endpoint.</li></ul>`,24)])])}const k=s(d,[["render",o]]);export{u as __pageData,k as default};
