import{_ as t,c as a,o as i,af as r}from"./chunks/framework.4vjtQ5Ee.js";const u=JSON.parse('{"title":"Component Patterns","description":"","frontmatter":{},"headers":[],"relativePath":"patterns/index.md","filePath":"patterns/index.md"}'),o={name:"patterns/index.md"};function s(n,e,l,c,p,d){return i(),a("div",null,[...e[0]||(e[0]=[r('<h1 id="component-patterns" tabindex="-1">Component Patterns <a class="header-anchor" href="#component-patterns" aria-label="Permalink to &quot;Component Patterns&quot;">​</a></h1><p>This section contains detailed documentation for each Plaincraft component pattern. Each pattern includes API documentation, architecture overview, usage examples, and adoption guides.</p><h2 id="available-patterns" tabindex="-1">Available Patterns <a class="header-anchor" href="#available-patterns" aria-label="Permalink to &quot;Available Patterns&quot;">​</a></h2><h3 id="inline-edit-label" tabindex="-1"><a href="/plaincraft/playbook/patterns/inline-edit-label.html">Inline Edit Label</a> <a class="header-anchor" href="#inline-edit-label" aria-label="Permalink to &quot;[Inline Edit Label](/patterns/inline-edit-label)&quot;">​</a></h3><p>A pragmatic inline-edit component with optimistic save, keyboard navigation, and headless architecture. Perfect for quick label editing without full form submission.</p><p><strong>Key Features:</strong></p><ul><li>Optimistic UI with error handling</li><li>Headless architecture (reusable controller hook)</li><li>Keyboard navigation (Enter to save, Escape to cancel)</li><li>Accessibility-first (ARIA, focus management)</li><li>No external dependencies</li></ul><hr><h3 id="release-changelog-automation" tabindex="-1"><a href="/plaincraft/playbook/patterns/release-changelog-automation.html">Release Changelog Automation</a> <a class="header-anchor" href="#release-changelog-automation" aria-label="Permalink to &quot;[Release Changelog Automation](/patterns/release-changelog-automation)&quot;">​</a></h3><p>Keeps <code>_tmp/</code> release summaries flowing into <code>CHANGELOG.md</code> while Playbook stories stay focused on business outcomes.</p><p><strong>Key Features:</strong></p><ul><li>Guardrailed consolidation script with dry-run mode</li><li>Template-enforced narrative structure for release notes</li><li>Automatic cleanup of processed <code>_tmp/</code> entries</li><li>Links directly to Playbook status updates for stakeholders</li></ul><hr><h3 id="ideas-source-of-truth" tabindex="-1"><a href="/plaincraft/playbook/patterns/ideas-source-of-truth.html">Ideas Source of Truth</a> <a class="header-anchor" href="#ideas-source-of-truth" aria-label="Permalink to &quot;[Ideas Source of Truth](/patterns/ideas-source-of-truth)&quot;">​</a></h3><p>Makes <code>/ideas</code> the authoritative contract between backlog automation, roadmap views, and Playbook storytelling.</p><p><strong>Key Features:</strong></p><ul><li>Aligns Purpose/Problem/Proposal/Acceptance metadata across automation</li><li>Preserves parent/child hierarchy for sub-issue pipelines</li><li>Keeps roadmap, changelog, and PR narratives in sync</li><li>Anchors governance metrics for lane health</li></ul><hr><h3 id="script-automation-guardrails" tabindex="-1"><a href="/plaincraft/playbook/patterns/script-automation-guardrails.html">Script Automation Guardrails</a> <a class="header-anchor" href="#script-automation-guardrails" aria-label="Permalink to &quot;[Script Automation Guardrails](/patterns/script-automation-guardrails)&quot;">​</a></h3><p>Ensures every ops script ships with the template contract so guardrails stay predictable for dry-runs and CI.</p><p><strong>Key Features:</strong></p><ul><li>Standard CLI header and exit-code semantics</li><li>Preview-first execution with <code>--yes</code> gates for writes</li><li>Shared <code>_lib/</code> helpers for composability</li><li>Guardrail test suite coverage (policy, smoke, size)</li></ul><hr><h3 id="scripts-first-lifecycle-overview" tabindex="-1"><a href="/plaincraft/playbook/patterns/scripts-first-lifecycle-overview.html">Scripts-First Lifecycle Overview</a> <a class="header-anchor" href="#scripts-first-lifecycle-overview" aria-label="Permalink to &quot;[Scripts-First Lifecycle Overview](/patterns/scripts-first-lifecycle-overview)&quot;">​</a></h3><p>Tracks every lifecycle transition through the sanctioned scripts so ideas, branches, PRs, and releases stay in sync.</p><p><strong>Key Features:</strong></p><ul><li>Maps intake → branch → PR → closeout to existing automation</li><li>Requires dry-run transcripts for audit-ready status notes</li><li>Enforces idea frontmatter as the narrative source of truth</li><li>Links to Storybook governance docs for each command</li></ul><hr><h3 id="scripts-first-lifecycle-rollout" tabindex="-1"><a href="/plaincraft/playbook/patterns/scripts-first-lifecycle-rollout.html">Scripts-First Lifecycle Rollout</a> <a class="header-anchor" href="#scripts-first-lifecycle-rollout" aria-label="Permalink to &quot;[Scripts-First Lifecycle Rollout](/patterns/scripts-first-lifecycle-rollout)&quot;">​</a></h3><p>Keeps idea metadata, branches, and draft PRs aligned the moment work begins so lifecycle reporting never drifts.</p><p><strong>Key Features:</strong></p><ul><li><code>pnpm gh:worktree</code> stamps <code>Issue</code>/<code>Status</code> directly on the idea file</li><li>Bootstrap commit + draft PR give stakeholders an immediate artifact</li><li>Dry-run logs capture the contract diff before anything is written</li><li>Links back to the script template so new lifecycle commands stay consistent</li></ul><hr><h3 id="scripts-first-lifecycle-rollback" tabindex="-1"><a href="/plaincraft/playbook/patterns/scripts-first-lifecycle-rollback.html">Scripts-First Lifecycle Rollback</a> <a class="header-anchor" href="#scripts-first-lifecycle-rollback" aria-label="Permalink to &quot;[Scripts-First Lifecycle Rollback](/patterns/scripts-first-lifecycle-rollback)&quot;">​</a></h3><p>Walks the lifecycle backward with the same commands used to advance it so rollback events leave a complete audit trail.</p><p><strong>Key Features:</strong></p><ul><li>Uses <code>remove-worktree.mjs</code> to unwind bootstrap artifacts safely</li><li>Replays branch + PR scripts in dry-run mode to confirm state</li><li>Requires updated transcripts in Playbook status updates</li><li>Calls out changelog follow-ups when releases already shipped</li></ul><hr><h3 id="roadmap-project-onboarding" tabindex="-1"><a href="/plaincraft/playbook/patterns/roadmap-project-onboarding.html">Roadmap Project Onboarding</a> <a class="header-anchor" href="#roadmap-project-onboarding" aria-label="Permalink to &quot;[Roadmap Project Onboarding](/patterns/roadmap-project-onboarding)&quot;">​</a></h3><p>Codifies the GitHub Projects setup so roadmap automation, lane views, and stakeholders stay aligned.</p><p><strong>Key Features:</strong></p><ul><li>Reproducible project scaffolding with scripts</li><li>WIP limits and lane filters baked into the template</li><li>Immediate pipeline-config sync guidance</li><li>Authentication cues for GitHub CLI usage</li></ul><hr><h2 id="pattern-categories" tabindex="-1">Pattern Categories <a class="header-anchor" href="#pattern-categories" aria-label="Permalink to &quot;Pattern Categories&quot;">​</a></h2><h3 id="unit-components" tabindex="-1">Unit Components <a class="header-anchor" href="#unit-components" aria-label="Permalink to &quot;Unit Components&quot;">​</a></h3><p>Self-contained, single-purpose components that solve specific UI problems:</p><ul><li><strong>Inline Edit Label</strong> — Quick inline text editing</li><li><em>(More patterns coming soon)</em></li></ul><h3 id="operational-patterns" tabindex="-1">Operational Patterns <a class="header-anchor" href="#operational-patterns" aria-label="Permalink to &quot;Operational Patterns&quot;">​</a></h3><p>Plays that wrap automation or workflow scripts around template-first docs:</p><ul><li><strong>Scripts-First Lifecycle Overview</strong> — Coordinates intake through closeout using the sanctioned commands.</li><li><strong>Release Changelog Automation</strong> — Script + template handshake to publish post-merge highlights.</li><li><strong>Ideas Source of Truth</strong> — Keeps <code>/ideas</code> authoritative for automation and storytelling.</li><li><strong>Script Automation Guardrails</strong> — Standardizes ops scripts around the shared CLI contract.</li><li><strong>Scripts-First Lifecycle Rollout</strong> — Bootstraps branches and draft PRs directly from the idea file.</li><li><strong>Scripts-First Lifecycle Rollback</strong> — Rewinds branches and PRs while preserving audit transcripts.</li><li><strong>Roadmap Project Onboarding</strong> — Rebuilds the Plaincraft roadmap with reproducible automation.</li></ul><h3 id="compositions" tabindex="-1">Compositions <a class="header-anchor" href="#compositions" aria-label="Permalink to &quot;Compositions&quot;">​</a></h3><p>Multi-component flows that combine unit components into larger patterns:</p><ul><li><em>(Patterns coming soon)</em></li></ul><hr><h2 id="using-patterns" tabindex="-1">Using Patterns <a class="header-anchor" href="#using-patterns" aria-label="Permalink to &quot;Using Patterns&quot;">​</a></h2><p>Each pattern page provides:</p><ol><li><strong>README content</strong> — Imported directly from the component source</li><li><strong>API documentation</strong> — Props, types, and interfaces</li><li><strong>Usage examples</strong> — Copy-paste code snippets</li><li><strong>Architecture notes</strong> — Controller hook and view layer details</li><li><strong>Adoption guide</strong> — Step-by-step integration instructions</li><li><strong>Storybook link</strong> — Interactive demos and interaction tests</li></ol><h2 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h2><p>To add a new pattern:</p><ol><li>Create the component following the <a href="/plaincraft/playbook/architecture.html">architecture guide</a></li><li>Add comprehensive README.md and ADOPTION.md</li><li>Create Storybook stories with interaction tests</li><li>Add pattern page to this playbook</li><li>Submit PR with all documentation</li></ol><p>See the <a href="https://github.com/louis-pvs/plaincraft" target="_blank" rel="noreferrer">repository</a> for contribution guidelines.</p>',61)])])}const m=t(o,[["render",s]]);export{u as __pageData,m as default};
