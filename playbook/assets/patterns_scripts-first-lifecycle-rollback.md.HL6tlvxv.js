import{_ as t,c as r,o as a,af as o}from"./chunks/framework.4vjtQ5Ee.js";const m=JSON.parse('{"title":"Scripts-First Lifecycle Rollback","description":"","frontmatter":{},"headers":[],"relativePath":"patterns/scripts-first-lifecycle-rollback.md","filePath":"patterns/scripts-first-lifecycle-rollback.md"}'),i={name:"patterns/scripts-first-lifecycle-rollback.md"};function s(l,e,c,n,d,p){return a(),r("div",null,[...e[0]||(e[0]=[o('<h1 id="scripts-first-lifecycle-rollback" tabindex="-1">Scripts-First Lifecycle Rollback <a class="header-anchor" href="#scripts-first-lifecycle-rollback" aria-label="Permalink to &quot;Scripts-First Lifecycle Rollback&quot;">​</a></h1><ul><li><strong>Audience:</strong> Lane C implementers and Lane D release captains responding to failed rollouts</li><li><strong>Decision Anchor:</strong> <a href="https://github.com/louis-pvs/plaincraft/blob/main/ideas/ARCH-scripts-first-project-governance.md" target="_blank" rel="noreferrer">ARCH-scripts-first-project-governance</a></li><li><strong>Owner:</strong> @lane.b</li><li><strong>TTL:</strong> Review by 2026-06-30</li><li><strong>Future Metric:</strong> &lt; 1 hour from rollback trigger to restored Ticketed status with attached transcripts</li><li><strong>Recorded Media:</strong> Record later</li></ul><h2 id="why-it-matters" tabindex="-1">Why it Matters <a class="header-anchor" href="#why-it-matters" aria-label="Permalink to &quot;Why it Matters&quot;">​</a></h2><p>Rollback procedures must walk the lifecycle backward without losing audit trails. When a branch needs to be abandoned or a PR reverted, automation should unwind each state change so Projects, Playbook notes, and changelog entries stay coherent.</p><h2 id="worked-example" tabindex="-1">Worked Example <a class="header-anchor" href="#worked-example" aria-label="Permalink to &quot;Worked Example&quot;">​</a></h2><p><code>pnpm pr:verify</code> flags an unmet acceptance item after review. To rollback:</p><ol><li><code>node scripts/ops/remove-worktree.mjs 91 --yes --keep-remote</code> cleans the bootstrap worktree while leaving the remote branch for inspection.</li><li><code>pnpm gh:worktree 91 --dry-run</code> confirms the idea frontmatter still reflects <code>Status: in-progress</code>. If it drifted, rerun with <code>--yes</code> to reapply the scripted metadata.</li><li><code>pnpm pr:generate --yes</code> rewrites the draft PR body so unchecked tasks surface again and reviewers see the reset context.</li><li>Post in the ADR thread with the dry-run transcripts and attach the Playbook rollback note so stakeholders know the current state.</li></ol><p>The GitHub Project item falls back to <code>Branched</code> or <code>Ticketed</code> automatically based on the script output, keeping the reporting board honest.</p><h2 id="constraints-to-honour" tabindex="-1">Constraints to Honour <a class="header-anchor" href="#constraints-to-honour" aria-label="Permalink to &quot;Constraints to Honour&quot;">​</a></h2><ul><li>Run <code>remove-worktree.mjs</code> before editing the idea file. Manual edits risk diverging from the status SoT.</li><li>Always capture new dry-run logs in the status note; rollback without evidence is treated as manual intervention.</li><li>Use the same commands that moved the lifecycle forward to reverse it—never edit the Project card directly.</li><li>If release notes already shipped, append a new <code>_tmp/</code> entry that references the rollback and rerun <code>pnpm changelog</code> so the history records the change.</li><li>Re-run <code>pnpm guardrails</code> after each corrective commit; merging with failing scopes is not permitted even during rollback.</li></ul><h2 id="links" tabindex="-1">Links <a class="header-anchor" href="#links" aria-label="Permalink to &quot;Links&quot;">​</a></h2><ul><li>Template README: <a href="https://github.com/louis-pvs/plaincraft/blob/main/templates/script/README.md" target="_blank" rel="noreferrer"><code>templates/script/README.md</code></a></li><li>Template USAGE: <a href="https://github.com/louis-pvs/plaincraft/blob/main/templates/script/USAGE.md" target="_blank" rel="noreferrer"><code>templates/script/USAGE.md</code></a></li><li>Rollback Script: <a href="https://github.com/louis-pvs/plaincraft/blob/main/scripts/ops/remove-worktree.mjs" target="_blank" rel="noreferrer"><code>scripts/ops/remove-worktree.mjs</code></a></li><li>Branch Bootstrap: <a href="https://github.com/louis-pvs/plaincraft/blob/main/scripts/ops/create-worktree-pr.mjs" target="_blank" rel="noreferrer"><code>scripts/ops/create-worktree-pr.mjs</code></a></li><li>PR Refresh: <a href="https://github.com/louis-pvs/plaincraft/blob/main/scripts/ops/generate-pr-content.mjs" target="_blank" rel="noreferrer"><code>scripts/ops/generate-pr-content.mjs</code></a></li><li>Storybook Views: <a href="https://louis-pvs.github.io/plaincraft/storybook/?path=/docs/governance-lifecycle-overview--docs" target="_blank" rel="noreferrer">Lifecycle Overview</a>, <a href="https://louis-pvs.github.io/plaincraft/storybook/?path=/docs/governance-lifecycle-branch--docs" target="_blank" rel="noreferrer">Branch</a></li></ul>',12)])])}const f=t(i,[["render",s]]);export{m as __pageData,f as default};
